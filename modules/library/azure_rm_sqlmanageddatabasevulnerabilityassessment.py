#!/usr/bin/python
#
# Copyright (c) 2018 Zim Kalinowski, <zikalino@microsoft.com>
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function
__metaclass__ = type


ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
module: azure_rm_sqlmanageddatabasevulnerabilityassessment
version_added: "2.8"
short_description: Manage Managed Database Vulnerability Assessment instance.
description:
    - Create, update and delete instance of Managed Database Vulnerability Assessment.

options:
    resource_group:
        description:
            - The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        required: True
    managed_instance_name:
        description:
            - The name of the managed instance.
        required: True
    database_name:
        description:
            - The name of the database for which the vulnerability assessment is defined.
        required: True
    vulnerability_assessment_name:
        description:
            - The name of the vulnerability assessment.
        required: True
    storage_container_path:
        description:
            - "A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server
               level vulnerability assessment policy doesn't set"
    storage_container_sas_key:
        description:
            - "A shared access signature (SAS Key) that has write access to the blob container specified in 'I(storage_container_path)' parameter. If
               'I(storage_account_access_key)' isn't specified, StorageContainerSasKey is required."
    storage_account_access_key:
        description:
            - "Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'I(storage_container_sas_key)' isn't
               specified, storageAccountAccessKey is required."
    recurring_scans:
        description:
            - The recurring scans settings
        suboptions:
            is_enabled:
                description:
                    - Recurring scans state.
            email_subscription_admins:
                description:
                    - Specifies that the schedule scan notification will be is sent to the subscription administrators.
            emails:
                description:
                    - Specifies an array of e-mail addresses to which the scan notification is sent.
                type: list
    state:
      description:
        - Assert the state of the Managed Database Vulnerability Assessment.
        - Use 'present' to create or update an Managed Database Vulnerability Assessment and 'absent' to delete it.
      default: present
      choices:
        - absent
        - present

extends_documentation_fragment:
    - azure

author:
    - "Zim Kalinowski (@zikalino)"

'''

EXAMPLES = '''
  - name: Create (or update) Managed Database Vulnerability Assessment
    azure_rm_sqlmanageddatabasevulnerabilityassessment:
      resource_group: vulnerabilityaseessmenttest-4799
      managed_instance_name: vulnerabilityaseessmenttest-6440
      database_name: testdb
      vulnerability_assessment_name: default
'''

RETURN = '''
id:
    description:
        - Resource ID.
    returned: always
    type: str
    sample: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Sql/managedInstances/vul
            nerabilityaseessmenttest-6440/databases/testdb/vulnerabilityAssessments/default"
'''

import time
from ansible.module_utils.azure_rm_common import AzureRMModuleBase

try:
    from msrestazure.azure_exceptions import CloudError
    from msrest.polling import LROPoller
    from msrestazure.azure_operation import AzureOperationPoller
    from azure.mgmt.sql import SqlManagementClient
    from msrest.serialization import Model
except ImportError:
    # This is handled in azure_rm_common
    pass


class Actions:
    NoAction, Create, Update, Delete = range(4)


class AzureRMManagedDatabaseVulnerabilityAssessments(AzureRMModuleBase):
    """Configuration class for an Azure RM Managed Database Vulnerability Assessment resource"""

    def __init__(self):
        self.module_arg_spec = dict(
            resource_group=dict(
                type='str',
                required=True
            ),
            managed_instance_name=dict(
                type='str',
                required=True
            ),
            database_name=dict(
                type='str',
                required=True
            ),
            vulnerability_assessment_name=dict(
                type='str',
                required=True
            ),
            storage_container_path=dict(
                type='str'
            ),
            storage_container_sas_key=dict(
                type='str'
            ),
            storage_account_access_key=dict(
                type='str'
            ),
            recurring_scans=dict(
                type='dict'
            ),
            state=dict(
                type='str',
                default='present',
                choices=['present', 'absent']
            )
        )

        self.resource_group = None
        self.managed_instance_name = None
        self.database_name = None
        self.vulnerability_assessment_name = None
        self.parameters = dict()

        self.results = dict(changed=False)
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction

        super(AzureRMManagedDatabaseVulnerabilityAssessments, self).__init__(derived_arg_spec=self.module_arg_spec,
                                                                             supports_check_mode=True,
                                                                             supports_tags=False)

    def exec_module(self, **kwargs):
        """Main module execution method"""

        for key in list(self.module_arg_spec.keys()) + ['tags']:
            if hasattr(self, key):
                setattr(self, key, kwargs[key])
            elif kwargs[key] is not None:
                if key == "storage_container_path":
                    self.parameters["storage_container_path"] = kwargs[key]
                elif key == "storage_container_sas_key":
                    self.parameters["storage_container_sas_key"] = kwargs[key]
                elif key == "storage_account_access_key":
                    self.parameters["storage_account_access_key"] = kwargs[key]
                elif key == "recurring_scans":
                    self.parameters["recurring_scans"] = kwargs[key]

        old_response = None
        response = None

        self.mgmt_client = self.get_mgmt_svc_client(SqlManagementClient,
                                                    base_url=self._cloud_environment.endpoints.resource_manager)

        resource_group = self.get_resource_group(self.resource_group)

        old_response = self.get_manageddatabasevulnerabilityassessment()

        if not old_response:
            self.log("Managed Database Vulnerability Assessment instance doesn't exist")
            if self.state == 'absent':
                self.log("Old instance didn't exist")
            else:
                self.to_do = Actions.Create
        else:
            self.log("Managed Database Vulnerability Assessment instance already exists")
            if self.state == 'absent':
                self.to_do = Actions.Delete
            elif self.state == 'present':
                self.log("Need to check if Managed Database Vulnerability Assessment instance has to be deleted or may be updated")
                self.to_do = Actions.Update

        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.log("Need to Create / Update the Managed Database Vulnerability Assessment instance")

            if self.check_mode:
                self.results['changed'] = True
                return self.results

            response = self.create_update_manageddatabasevulnerabilityassessment()

            if not old_response:
                self.results['changed'] = True
            else:
                self.results['changed'] = old_response.__ne__(response)
            self.log("Creation / Update done")
        elif self.to_do == Actions.Delete:
            self.log("Managed Database Vulnerability Assessment instance deleted")
            self.results['changed'] = True

            if self.check_mode:
                return self.results

            self.delete_manageddatabasevulnerabilityassessment()
            # make sure instance is actually deleted, for some Azure resources, instance is hanging around
            # for some time after deletion -- this should be really fixed in Azure.
            while self.get_manageddatabasevulnerabilityassessment():
                time.sleep(20)
        else:
            self.log("Managed Database Vulnerability Assessment instance unchanged")
            self.results['changed'] = False
            response = old_response

        if self.state == 'present':
            self.results.update(self.format_item(response))
        return self.results

    def create_update_manageddatabasevulnerabilityassessment(self):
        '''
        Creates or updates Managed Database Vulnerability Assessment with the specified configuration.

        :return: deserialized Managed Database Vulnerability Assessment instance state dictionary
        '''
        self.log("Creating / Updating the Managed Database Vulnerability Assessment instance {0}".format(self.vulnerability_assessment_name))

        try:
            response = self.mgmt_client.managed_database_vulnerability_assessments.create_or_update(resource_group_name=self.resource_group,
                                                                                                    managed_instance_name=self.managed_instance_name,
                                                                                                    database_name=self.database_name,
                                                                                                    vulnerability_assessment_name=self.vulnerability_assessment_name,
                                                                                                    parameters=self.parameters)
            if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
                response = self.get_poller_result(response)

        except CloudError as exc:
            self.log('Error attempting to create the Managed Database Vulnerability Assessment instance.')
            self.fail("Error creating the Managed Database Vulnerability Assessment instance: {0}".format(str(exc)))
        return response.as_dict()

    def delete_manageddatabasevulnerabilityassessment(self):
        '''
        Deletes specified Managed Database Vulnerability Assessment instance in the specified subscription and resource group.

        :return: True
        '''
        self.log("Deleting the Managed Database Vulnerability Assessment instance {0}".format(self.vulnerability_assessment_name))
        try:
            response = self.mgmt_client.managed_database_vulnerability_assessments.delete(resource_group_name=self.resource_group,
                                                                                          managed_instance_name=self.managed_instance_name,
                                                                                          database_name=self.database_name,
                                                                                          vulnerability_assessment_name=self.vulnerability_assessment_name)
        except CloudError as e:
            self.log('Error attempting to delete the Managed Database Vulnerability Assessment instance.')
            self.fail("Error deleting the Managed Database Vulnerability Assessment instance: {0}".format(str(e)))

        return True

    def get_manageddatabasevulnerabilityassessment(self):
        '''
        Gets the properties of the specified Managed Database Vulnerability Assessment.

        :return: deserialized Managed Database Vulnerability Assessment instance state dictionary
        '''
        self.log("Checking if the Managed Database Vulnerability Assessment instance {0} is present".format(self.vulnerability_assessment_name))
        found = False
        try:
            response = self.mgmt_client.managed_database_vulnerability_assessments.get(resource_group_name=self.resource_group,
                                                                                       managed_instance_name=self.managed_instance_name,
                                                                                       database_name=self.database_name,
                                                                                       vulnerability_assessment_name=self.vulnerability_assessment_name)
            found = True
            self.log("Response : {0}".format(response))
            self.log("Managed Database Vulnerability Assessment instance : {0} found".format(response.name))
        except CloudError as e:
            self.log('Did not find the Managed Database Vulnerability Assessment instance.')
        if found is True:
            return response.as_dict()

        return False

    def format_item(self, d):
        d = {
            'id': d.get('id', None)
        }
        return d


def main():
    """Main execution"""
    AzureRMManagedDatabaseVulnerabilityAssessments()


if __name__ == '__main__':
    main()
